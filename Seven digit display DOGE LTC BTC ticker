#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <EEPROM.h>
#include <ArduinoJson.h>
#include <FastLED.h>

String storedSsid = "";
String storedPassword = "";

#define LED_PIN D2
#define NUM_LEDS 67

CRGB leds[NUM_LEDS];
CRGB ledColor = CRGB::Red;

// Define the LED digit segment positions
int segments[8][7] = {
  {1, 27, 54, 55, 53, 26, 28},   // LED’s for ones place
  {3, 25, 52, 57, 51, 24, 30},   // LED’s for tens place
  {5, 23, 50, 59, 49, 22, 32},   // LED’s for hundreds place
  {7, 21, 48, 61, 47, 20, 34},   // LED’s for thousands place
  {9, 19, 46, 63, 45, 18, 36},   // LED’s for ten thousands place
  {11, 17, 44, 65, 43, 16, 38},  // LED’s for hundred thousands place
  {13, 15, 42, 67, 41, 14, 40},  // LED’s for millions place
  {66, 64, 62, 60, 58, 56, 33}   // Define the LED positions for the decimal points and '33' for the ':' if present
};

int digitSegments[10][7] = {
  {1, 1, 1, 1, 1, 1, 0},   // 0
  {0, 1, 1, 0, 0, 0, 0},   // 1
  {1, 1, 0, 1, 1, 0, 1},   // 2
  {1, 1, 1, 1, 0, 0, 1},   // 3
  {0, 1, 1, 0, 0, 1, 1},   // 4
  {1, 0, 1, 1, 0, 1, 1},   // 5
  {1, 0, 1, 1, 1, 1, 1},   // 6
  {1, 1, 1, 0, 0, 0, 0},   // 7
  {1, 1, 1, 1, 1, 1, 1},   // 8
  {1, 1, 1, 1, 0, 1, 1}    // 9
};
// Replace with your network credentials
const char *AP_SSID = "Bitcoin clock";
const char *AP_PASS = "12345678";

ESP8266WebServer server(80);

const int eepromSize = 512;
const int ssidOffset = 0;
const int passOffset = 64;

const int BAUD_RATE = 9600;

const int requestInterval = 1200000; // in milliseconds
int previousMillis = 1200000;
void handleRoot();
void handleConnect();
void setEEPROMString(int offset, String data);
String getEEPROMString(int offset);


// Global variable to store the rounded Bitcoin price
String btcPriceStr = "";
String ltcPriceStr = "";
String dogePriceStr = "";
String numStr = "";


void setup() {
  Serial.begin(BAUD_RATE);
  EEPROM.begin(eepromSize);
  storedSsid = getEEPROMString(ssidOffset);
  storedPassword = getEEPROMString(passOffset);
  WiFi.mode(WIFI_AP);

  // Set up the LED strip
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);  

  // Check if Wi-Fi credentials are stored in EEPROM
  String ssid = storedSsid;
  String password = storedPassword;
  if (ssid != "" && password != "") {
    WiFi.begin(ssid.c_str(), password.c_str());
    Serial.println("Connecting to Wi-Fi...");
    int timeout = 0;
    while (WiFi.status() != WL_CONNECTED && timeout < 30) {
      delay(500);
      Serial.print(".");
      timeout++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nConnected to Wi-Fi!");
    } else {
      Serial.println("\nFailed to connect to Wi-Fi.");
    }
  }
  
  // Create access point with default credentials
  WiFi.softAP(AP_SSID, AP_PASS);
  Serial.println("Access point created.");

  server.on("/", handleRoot);
  server.on("/connect", HTTP_POST, handleConnect);
  server.begin();
  Serial.print("Access Point IP: ");
  Serial.println(WiFi.softAPIP());
}


void handleRoot() {
  String ssid = storedSsid;
  String password = storedPassword;

  String html = "<!DOCTYPE html><html><head><title>ESP8266 Wi-Fi Configuration</title></head><body><h1>ESP8266 Wi-Fi Configuration</h1><form action='/connect' method='post'><label for='ssid'>SSID:</label><input type='text' name='ssid' id='ssid' value='";
  html += ssid;
  html += "' required><br><br><label for='password'>Password:</label><input type='password' name='password' id='password' value='";
  html += password;
  html += "' required><br><br><input type='submit' value='Change Credentials'></form></body></html>";
  server.send(200, "text/html", html);
}

void handleConnect() {
  String ssid = server.arg("ssid");
  String password = server.arg("password");


  // Save the values to EEPROM
  setEEPROMString(ssidOffset, ssid);
  setEEPROMString(passOffset, password);



  // Update global variables
  storedSsid = ssid;
  storedPassword = password;



  // Print a confirmation message
  String html = "<!DOCTYPE html><html><head><title>ESP8266 Wi-Fi Configuration</title></head><body><h1>ESP8266 Wi-Fi Configuration</h1><p>Credentials updated!</p>";
  html += "<p>SSID: " + ssid + "</p>";
  html += "<p>Password: " + password + "</p>";
  server.send(200, "text/html", html);
}


void getPrice() {
  // Make HTTP request to CoinGecko API
  WiFiClientSecure client;
  client.setInsecure();
  HTTPClient http;
  http.begin(client, "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,litecoin,dogecoin&vs_currencies=usd");
  int httpCode = http.GET();
  delay(100);
  
  // Parse JSON response
  if (httpCode > 0) {
    String response = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, response);
    JsonObject bitcoin = doc["bitcoin"].as<JsonObject>();
    btcPriceStr = String(bitcoin["usd"].as<float>(), 0);
    JsonObject litecoin = doc["litecoin"].as<JsonObject>();
    ltcPriceStr = String(litecoin["usd"].as<float>(), 2);
    JsonObject dogecoin = doc["dogecoin"].as<JsonObject>();
    dogePriceStr = String(dogecoin["usd"].as<float>(), 4);
  }
  http.end();

  // Print prices to serial monitor
  Serial.print("Bitcoin Price (USD): ");
  Serial.println(btcPriceStr);
  Serial.print("Litecoin Price (USD): ");
  Serial.println(ltcPriceStr);
  Serial.print("Dogecoin Price (USD): ");
  Serial.println(dogePriceStr);
}




void displayNumber() {
  int num = atoi(numStr.c_str()); // convert the integer part of the string to an integer

  int decimalPosition = -1; // initialize decimal position as -1, indicating there is no decimal point

  // Search for decimal point in the string
  for (int i = 0; i < numStr.length(); i++) {
    if (numStr[i] == '.') {
      decimalPosition = i;
      break;
    }
  }

  // Remove decimal point from the string
  if (decimalPosition >= 0) {
    numStr.remove(decimalPosition, 1);
  }

  // Convert string to integer
  num = atoi(numStr.c_str());

  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::Black;  // turn off all LEDs
  }

  int digitCount = 0;

  // Loop through the digits of the integer and display them
  while (num > 0 && digitCount < 7) {
    int digit = num % 10;
    for (int i = 0; i < 7; i++) {
      if (digitSegments[digit][i]) {
        leds[segments[digitCount][i] - 1] = ledColor;
      }
    }
    digitCount++;
    num /= 10;
  }

  // Loop through any leading zeros and display them
  int leadingZeroCount = 0;
  while (numStr[leadingZeroCount] == '0' && leadingZeroCount < numStr.length() - 1) {
    for (int j = 0; j < 7; j++) {
      if (digitSegments[0][j]) {
        leds[segments[digitCount + leadingZeroCount][j] - 1] = ledColor;
      }
    }
    leadingZeroCount++;
  }

}

void setEEPROMString(int offset, String data) {
  for (int i = 0; i < data.length(); i++) {
    EEPROM.write(offset + i, data[i]);
  }
  EEPROM.write(offset + data.length(), '\0');
  EEPROM.commit();
}


String getEEPROMString(int offset) {
  String data;
  char c = EEPROM.read(offset);
  int i = 0;
  while (c != '\0' && i < 64) {
    data += c;
    i++;
    c = EEPROM.read(offset + i);
  }
  return data;
}


void loop() {
  server.handleClient();
  if (WiFi.status() == WL_CONNECTED)  {  
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= requestInterval) {
      // It's time to call getPrice
      previousMillis = currentMillis;
      getPrice();      
    }
    numStr = btcPriceStr;       
    ledColor = CRGB::Orange;
    displayNumber();      
    FastLED.show();
    delay(5000);
    numStr = dogePriceStr;       
    ledColor = CRGB::Yellow;
    displayNumber();
    leds[segments[7][2] - 1] = ledColor;          
    FastLED.show();
    delay(5000);     
    numStr = ltcPriceStr;       
    ledColor = CRGB::Green;
    displayNumber();
    leds[segments[7][4] - 1] = ledColor;    
    FastLED.show();
    delay(5000);    
  }
}
